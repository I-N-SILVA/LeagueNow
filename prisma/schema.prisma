generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  password      String?
  role          UserRole  @default(TEAM_MANAGER)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  
  // Relations based on role
  managedTeams  Team[]    @relation("TeamManager")
  refereededMatches Match[] @relation("MatchReferee")
  createdLeagues League[]  @relation("LeagueAdmin")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model League {
  id          String      @id @default(cuid())
  name        String
  description String?
  sport       SportType
  startDate   DateTime
  endDate     DateTime?
  status      LeagueStatus @default(DRAFT)
  maxTeams    Int         @default(16)
  
  // Settings
  pointsForWin  Int @default(3)
  pointsForDraw Int @default(1)
  pointsForLoss Int @default(0)
  
  // QR Code for fan videos
  qrCode      String?     @unique
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  adminId     String
  admin       User        @relation("LeagueAdmin", fields: [adminId], references: [id])
  teams       Team[]
  matches     Match[]
  standings   Standing[]

  @@map("leagues")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  logo        String?
  description String?
  contactEmail String?
  contactPhone String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  leagueId    String
  league      League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  managerId   String
  manager     User     @relation("TeamManager", fields: [managerId], references: [id])
  players     Player[]
  
  // Match relations
  homeMatches Match[]  @relation("HomeTeam")
  awayMatches Match[]  @relation("AwayTeam")
  standings   Standing[]

  @@unique([leagueId, name])
  @@map("teams")
}

model Player {
  id          String   @id @default(cuid())
  name        String
  position    String?
  jerseyNumber Int?
  photo       String?
  dateOfBirth DateTime?
  email       String?
  phone       String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  teamId      String
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, jerseyNumber])
  @@map("players")
}

model Match {
  id          String      @id @default(cuid())
  round       Int
  matchNumber Int
  scheduledAt DateTime
  startedAt   DateTime?
  completedAt DateTime?
  status      MatchStatus @default(SCHEDULED)
  
  // Scores
  homeScore   Int         @default(0)
  awayScore   Int         @default(0)
  
  // Match details
  venue       String?
  notes       String?
  
  // Fan engagement
  qrCodeScans Int         @default(0)
  fanVideos   FanVideo[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  leagueId    String
  league      League      @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  homeTeamId  String
  homeTeam    Team        @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeamId  String
  awayTeam    Team        @relation("AwayTeam", fields: [awayTeamId], references: [id])
  refereeId   String?
  referee     User?       @relation("MatchReferee", fields: [refereeId], references: [id])

  @@unique([leagueId, round, matchNumber])
  @@map("matches")
}

model Standing {
  id          String @id @default(cuid())
  position    Int
  played      Int    @default(0)
  won         Int    @default(0)
  drawn       Int    @default(0)
  lost        Int    @default(0)
  goalsFor    Int    @default(0)
  goalsAgainst Int   @default(0)
  goalDifference Int @default(0)
  points      Int    @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  leagueId    String
  league      League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  teamId      String
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([leagueId, teamId])
  @@map("standings")
}

model FanVideo {
  id          String   @id @default(cuid())
  videoUrl    String
  thumbnailUrl String?
  title       String?
  description String?
  uploaderName String?
  uploaderEmail String?
  approved    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  
  // Relations
  matchId     String
  match       Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@map("fan_videos")
}

enum UserRole {
  LEAGUE_ADMIN
  TEAM_MANAGER
  REFEREE
}

enum SportType {
  FOOTBALL
  BASKETBALL
  SOCCER
  VOLLEYBALL
  TENNIS
  CRICKET
  HOCKEY
  RUGBY
  BASEBALL
  BADMINTON
}

enum LeagueStatus {
  DRAFT
  REGISTRATION_OPEN
  REGISTRATION_CLOSED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MatchStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  POSTPONED
  CANCELLED
}